// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: api/video_v1/video_service.proto

package grpc_golang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VideoV1_Get_FullMethodName = "/video_v1.VideoV1/Get"
)

// VideoV1Client is the client API for VideoV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoV1Client interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type videoV1Client struct {
	cc grpc.ClientConnInterface
}

func NewVideoV1Client(cc grpc.ClientConnInterface) VideoV1Client {
	return &videoV1Client{cc}
}

func (c *videoV1Client) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, VideoV1_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoV1Server is the server API for VideoV1 service.
// All implementations must embed UnimplementedVideoV1Server
// for forward compatibility
type VideoV1Server interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedVideoV1Server()
}

// UnimplementedVideoV1Server must be embedded to have forward compatible implementations.
type UnimplementedVideoV1Server struct {
}

func (UnimplementedVideoV1Server) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedVideoV1Server) mustEmbedUnimplementedVideoV1Server() {}

// UnsafeVideoV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoV1Server will
// result in compilation errors.
type UnsafeVideoV1Server interface {
	mustEmbedUnimplementedVideoV1Server()
}

func RegisterVideoV1Server(s grpc.ServiceRegistrar, srv VideoV1Server) {
	s.RegisterService(&VideoV1_ServiceDesc, srv)
}

func _VideoV1_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoV1Server).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoV1_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoV1Server).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoV1_ServiceDesc is the grpc.ServiceDesc for VideoV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video_v1.VideoV1",
	HandlerType: (*VideoV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _VideoV1_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/video_v1/video_service.proto",
}
